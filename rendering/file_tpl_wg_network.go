package rendering

import "text/template"

var tplPeerConfig = template.Must(template.New("wg-network.conf").Parse(fileTplWgNetwork))

const fileTplWgNetwork = `# This is a WireGuard configuration file for peer {{.Interface.ID}} at {{.Network.ID}} network.
# Generated by wg-make at {{ .GeneratedAt.Format "2006-01-02 15:04:05 -0700" }}.
# CAUTION: DO NOT modify this file manually.

{{with .Interface -}}
[Interface]
# ID = {{.ID}}
PrivateKey = {{.PrivateKey}}
Address = {{.Address}}
{{- with .ListenPort}}
ListenPort = {{.}}{{end}}

{{- if .IsBounceServer}}

{{if .IsLinux -}}
# Backup settings then enable packet forwarding in kernel-level.
PostUp = sysctl "net.ipv4.ip_forward" >> /tmp/.sysctl-save; sysctl -w "net.ipv4.ip_forward=1"
# Restore settings then remove the backup.
PostDown = sysctl -p /tmp/.sysctl-save && rm -f /tmp/.sysctl-save

# Enable/disable packet forwarding after the interface is up/down
PostUp = iptables -t nat -A POSTROUTING -o {{.PublicInterface}} -j MASQUERADE; ip6tables -t nat -A POSTROUTING -o {{.PublicInterface}} -j MASQUERADE; iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT;
PostDown = iptables -t nat -D POSTROUTING -o {{.PublicInterface}} -j MASQUERADE; ip6tables -t nat -D POSTROUTING -o {{.PublicInterface}} -j MASQUERADE; iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT;
{{- end -}}
{{- end -}}
{{- end}}

{{range $i, $p := .Peers}}
[Peer]
# ID = {{.ID}}
{{- with .Endpoint}}
Endpoint = {{.}}{{end}}
PublicKey = {{.PublicKey}}
AllowedIPs = {{.AllowedIPsForPeer $.Interface}}{{if not $.Interface.IsBounceServer}},{{$.Network.Subnet}}{{end}}
{{- if .Endpoint -}}
{{- with $.Interface.PersistentKeepalive}}
PersistentKeepalive = {{.}}{{end}}
{{- end}}
{{end}}

`
